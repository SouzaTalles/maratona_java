existem dois tipos de coloção:
- ordenada (Ordered): Quando o java lembra da ordem;
- sortidos (Sorted): Quando você define como os objetos vão ser guardados.

Quando se trabalha com coleções tem se o cuidado com a complexidade Big-O
e cada coleção tem um tipo de complexidade para a coleção

Site para olhar a complexidade Big-O
- https://stackoverflow.com/questions/559839/big-o-summary-for-java-collections-framework-implementations
- https://gist.github.com/FedericoPonzi/8d5094dbae33cbb94536a73f62d1c1a0
- https://borg-net.cc/posts/java-collections-big-o
- https://medium.com/@omkarbhavare2406/delving-into-big-o-notation-the-foundation-of-algorithm-analysis-3329816d7133
- https://www.cl.cam.ac.uk/teaching/1819/OOProg/complexity.pdf
- https://www.bigocheatsheet.com/

* List é coleção ordenada

Coleções não aceitam tipo primitivo;

* metodo sort de Collections
para poder usar tem tem ter a interface Comparable implementada na classe
e fazer a sobre escrita do método compareTo usando as seguintes regras
- negativo se o this < outroManga
- se this == outroManga, return 0
- positivo se this > outroManga
Um exemplo a baixo:
    @Override
    public int compareTo(Manga outroManga) {
        if (this.id < outroManga.id) {
            return -1;
        } else if (this.id.equals(outroManga.id)) {
            return 0;
        } else {
            return 1;
        }
    }
-- como o id é um Long(wapper) ele já tem o metodo compareTo implementado
-- podendo ser feito da seguinte maneira
    @Override
    public int compareTo(Manga outroManga) {
        return this.id.compareTo(outroManga.id);
    }
-- quando usado um tipo primitivo usa o método
    return Double.compare(preco, outroManga.preco);
-- Feito com String
        return this.nome.compareTo(outroManga.getNome());

