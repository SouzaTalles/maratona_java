Throwable é a classe onde fica tudo de ruim que pode acontecer no java
como filha ela tem o "Error" e "Exception"


ERROR
StackOverflowError, acontece quando estoura a mémoria disponível para a stack do java

Error é algo que acontece na JVM que provavelmente não vai ser possível recuperar em tempo de execução.
Como solução basta arrumar o código e executar novamente

Exceções
Importante!!
- exception checked: são exceções que são filhas da classe Exception diretamente,
se não tratadas vão lançar um error em tempo de compilação.
É obrigatório tratar.

- exception unchecked: são incluindo RuntimeException e suas filhas (ou pra baixo na imagem),
quando lançadas pelo programa quase 100% das vezes o erro é do programador.
Não é obrigatório tratar.

Para tratar as exception checked é usado o:
Try {
    Aqui vai o método a ser tratado
} catch (Aqui vai o tipo de exceção, quanto mais específico melhor) {
    Nuca deixar esse bloco em branco
    // e.printStackTrace();
}

Não colocar regra de négocio dentro do catch

Deu alguma Exceção, para de fazer pergunta, copia a linha que idêntifica a exceção e cola no google e lê.

Desenvolvedores que sabem resolver problemas são os que tem maior chance no mercado, os que brilham, que querem contratar.

Para lançar exceções usa o "throw new e a exceção que vai ser lançada"
Usando isso não é preciso usar o try{}catch{}
Exemplo:
      if(b == 0)
          throw new RuntimeException("Argumento ilegal, não pode ser zero");
      }
Usar as exceções mais especificas possíveis
Deve tratar a exceção que é enviada na main para o código não para de funcionar

Prós e contras de fazer o tratamento com try {} catch {}
Pró: Como tá sendo feito um tratamento de exceção o código não vai parar
contra: A pessoa que tá chamando o método tecnicamente não tem a opção de fazer o tratamento do jeito dele

Quando se deve usar o throws IOException ou o try catch?
quando ta criando um método privado normalmente usado o try catch, pq o método privado ninguém vai chamar esse método e não faz sentido mandar para o próximo.
se não será usado o throws IOException

Outra forma de fazer é usar o try catch e relançar a exceção
Exemplo dentro exception/test/ExceptionTest03

try-catch-finally é um bloco de código que o finally sempre vai ser executado independente de qualquer coisa
O finally é utilizado quando quando é preciso trabalhar com recursos sendo liberadas por outras aplicações quem precisam ser fechada após o uso

É permitido usar o try-finally, sem o catch e não é permitido usar apenas o try
Usando o try-finally, como a exceção não está sendo tratada, será preciso tratar ela na classe main

multi-catchs
Para tratar múltiplas exceções usa o try com vários catchs
REGRAS:
- Não é permitido colocar um tipo mais genérico a frente dos outros chaths
(exceções mais genéricas sempre no final)
- Quando coloca um multi-catchs com várias exceções tá praticamente transformando a variável "e" em uma final
É permitido colocar exceções que não estão na mesma linha de herança, separados por pipes
Exemplos RumtimeExceptionTest03

Try with Resources
   try (Declara a variável e instancia o objeto) {

   }catch (exceção e) {

   }
O try com recursos tá se carregando de fechar a conexão dessa variável de referencia,
com isso tem uma regra que só pode colocar objetos dentro do try with Resources que implementem Closeable ou AutoCloseable
É possível usar mais de um objeto de uma vez no try with Resources
obs: a ordem de fechamento é feito na ordem inversa
Quando tá trabalhando com o try with Resources pode tirar o catch, mas é obrigado a colocar o throws
"...Apesar de que... um Try sem Catch é tipo um Romeu sem Julieta né mano..." Dojo, Dev 2021 06:45""

Exceções customizadas
todas as exceções terminam o nome com exception

Sobrescrita de métodos com exceções
Regras:
- Quando se está sobrescrevendo um método, não é obrigatório declarar as mesmas exceções daquele método,
pois a funcionalidade da sobrescrita pode ser completamente diferente, e não lança exceção
- é permitido lançar uma ou todas as exceções do método original
- Pode adicionar qualquer exceção do tipo unchecked, filhas de Runtime
- Não pode adicionar exceções mais genéricas do que foram declarados no método original ou do tipo checked
- Mas pode adicionar exceções mais especificas do que as que estão no método original
- não pode adicionar nenhuma exceção do tipo checked que não foi declarada no método original

